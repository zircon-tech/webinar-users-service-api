version: 0.2
run-as: root

# Make sure you replace the REPOSITORY_URL with your ECR repository URL
# as well as the AWS account ID and region where the ECR repository is located

phases:
  pre_build:
    commands:
      - echo Logging in to Amazon ECR.......
      - aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin 670171959034.dkr.ecr.us-east-2.amazonaws.com
      - REPOSITORY_URL=670171959034.dkr.ecr.us-east-2.amazonaws.com/users-service-api
      - SERVICE_NAME=users-service-api
      - IMAGE_TAG=$SERVICE_NAME:latest
  build:
    commands:
      - echo Build started on `date`
      - echo Docker image is building... 
      - npm --version
      - docker build -t $SERVICE_NAME .
      - docker tag $IMAGE_TAG $REPOSITORY_URL:latest    
  post_build:
    commands:
      ## Push the Docker image to ECR
      - echo Build completed on `date`
      - echo Pushing Docker image to AWS ECR .....
      - docker push $REPOSITORY_URL:latest
      - echo ECS Configuration....
      - echo Writing image definitions file...
      - CONTAINER_NAME=users-service-api-container
      - printf '[{"name":"%s","imageUri":"%s"}]' $CONTAINER_NAME $REPOSITORY_URL:latest > image_definitions.json
      - cat image_definitions.json

      ## Update the lambda function with the new image
      - echo Creating a new lambda function version...
      - aws lambda update-function-code --function-name users-service-api-function --image-uri $REPOSITORY_URL:latest
      - echo Waiting for the lambda function to be updated...
      - sleep 10
      - echo Publishing the new lambda function version...
      - aws lambda publish-version --function-name users-service-api-function

      ## Create the appspec file with the version definitions
      - echo Get the current active and latest version of the lambda function...
      - CURRENT_VERSION=$(aws lambda get-alias --function-name users-service-api-function --name prod --query 'FunctionVersion' --output text)
      - LATEST_VERSION=$(aws lambda list-versions-by-function --function-name users-service-api-function --no-paginate --query 'Versions[-1].[Version]' --output text)
      # - LATEST_VERSION=$(aws lambda list-versions-by-function --function-name users-service-api-function --no-paginate --query "max_by(Versions, &to_number(to_number(Version) || '0'))")
      - echo Latest version of the lambda function is $LATEST_VERSION and the current version is $CURRENT_VERSION
      - echo Writing appspec file...
      - |
        printf 'version: 0.0\nResources:\n  - UsersApiService:\n      Type: AWS::Lambda::Function\n      Properties:\n        Name: "users-service-api-service"\n        Alias: "prod"\n        CurrentVersion: %s\n        TargetVersion: "%s"\n' $CURRENT_VERSION $LATEST_VERSION > appspec.yaml
      - cat appspec.yaml

artifacts:
  files: 
    - appspec.yaml
    - image_definitions.json
